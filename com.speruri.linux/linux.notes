Linux directory starts from root and it is /
Directory system in linux os nothing but the tree structure

/ - Root directory and everything starts from here
/bin - binary and other executable files go here
/etc - System configuration files go here. These files will have configuration settings of the application
/home - user home directory somethign like /home/speruri
/opt - optional or third party software live like google earth installs in here. 
	So it contains the software that are not bundled with the OS.
/tmp - stores the temp files. temp files will get cleared at boot time. 
	Donot keep the files in tmp if they are long term
/usr - user related programs will be here. 
/var - contains variable data. i.e, the fiels hat constantly change

Other file directories are 
/export - shared file systems
/home - home directories
/lib - system libraries
/lib64 - system 64bit libraries
/lost+found - Used by the file system to store the recovered files after the file check has been performed
/media - used to mount removable media ike CD-roms
/cd-rom - used to mount CD-DOM
/boot - contains the boot files of the OS
/dev - device files, typically controlled by the OS and the system admins
/cdgroup - Control Group hierarchies
/mnt - used to mount the external file systems
/proc - Provides info about the running processes
/root The home directory of the root account
/sbin System admins binaries
/selinux used to display the info about the SElinux
/srv - contains the data which is served by the syste,
/srv/www - contains the web server files to be served 
/srv/ftp contains ftp files
/sys used to display sometimes the configure the devices known to the linux

Application directory structure
	/usr/local/crashplan/bin
	/usr/local/crashplan/etc
	/usr/local/crashplan/logs
	/usr/local/crashplan/lib

	Here the application is crashplan (which is not bundled with the OS) and the directories of it is mentioned like above
	
	/opt/avg/bin
	/opt/avg/etc
	/opt/avg/lib
	/opt/avg/log
	
	Here avg is the third paty software which is not bundled with the OS and this has to be 
	available to all the users in the OS, so installed at the OS level.
	the above is user level and installed at the user level
	
	/opt/google
	/opt/google/earth
	/opt/google/chrome


The most common directories we should know are
	/
	/opt
	/etc
	/home
	/tmp
	/var
	/usr
	/media
	/bin

Applications that are not shipped with the OS are installed at 
	/opt
	/usr/local


SHELL
	Shell is the application which interacts with the linux kernal
	The GUI is called graphical shell
	Shell accepts the commands and execute them for you
	This is also called as command line interpreter
	Some of the features are
		Shell is the command line tool
		Its very fast 
		Server distro's comes with command line tools
		desktop appications come with both GUI and command line
			Some of the opreations line renaming every file in a directory will be tedious with GUI where as renaming with command line
			is super fast.
		Use GUi when it make sense and CLI when it make senselike
			if we want to browse a website, CLI makes no sense
					
	Shell promt will be displayed as
		[user@pcname:~]$
			a normal user prompt
		root@pcname:~# 
			a super user
	
Root or super user
	Its very powerful user and only be used by
		system administratrs to
			install, run, start an application
	Day to day activities are run with user accounts but not the root account
	root access will have special previlages and can delete everything
	~ is used by the current user home directory
	~speruri - goes to the /home/speruri directory
	
	if the file ends with ~, then its called a backup file
	If the file starts with . , then its called hidden file
	if the the file starts with .. , then its a 
			
Basic Linux Commands 
	ls - list the directory contents
		ls -l displays the long listing format. more info
				
	cd - change directory
	pwd - present working directory
	man - displays the online manual for a given command as argument
		to navigate the man page, click
			g - to go to top of the page
			G - to bottom of the page
			q- to quit the page
			down arrow - one line down
			up arrow - one line up
	echo - displays the argument passed
		displays the string which we passed. It also used to display the system variables
			echo $PATH 
				displays the system PATH variable
				PATH is the location link to where the commands to be searched. 
					when you type a command in the shell, then it searches for that command in the location mentioned 
					in the PATH variable
				for example, if the PATH value is 
					/home/speruri/bin:/home/speruri/.local/bin:usr/local/sbin
					then it searches for the typed in command in the /home/speruri/bin path and then
					/home/speruri/.local/bin and then
					usr/local/sbin until the command was found or the path are over.
					if not found, then it shows "command not found"
	which - tells the location path of the command. locates the command
		which cat
		which ls
		which tac
	
	cat - concatenates the display files
	tac - displays the contents of the files in reverse order. last line first and so on.
	exit - exits the shell or current session
	clear - clears the screen
	
Accessing directories
	Directories are containers of files and other directoriews
	it forms a tree struture
	in linux
		. - is current directory
		..  is the parent directory
		cd  Change directory
		
	pwd - present working directory
	
	mkdir - creates a directory
	rmdir - remoes directory if the directory is empty
	rm -rf <directory> - removes the directory recursively
	
Listing the files	
	ls -l 
		Executing this command will display the following
		
		Type - '-'
			The type of the file is reprsented by 
				- for file
				! for symbolic link
		Permissions - xrw--w-rw
			Tells the permissions of the file
		No of Links - 2	
			Tells the no of symbolic links to that file
		Owner name - root/speruri
			Shows the owner of that file
		Group Name - root/speruri
			Shows the group name of that file
		Size - 4096
			size of that file
		Last Modified datetime - 
			Shows the last modified data and time
		File name 
			shows the file name
		
Hidden Files are shown as .filename 
	starts with .
	They are not seen by ls -l
	We have to use ls - l -a	

To show the file types
	ls -F
		@ - for links
		/ - for directories
		. - Executables	
		
	ls -t
		shows the files sorted by time
	ls -r
		shows the files in reverse order
	ls -latr
		shows all files with reverse sorted order by time
	ls -R
		shows the files recursively
	ls -color
		shows the items in color
				
	tree
		displays the folder structure as tree
			
	When dealing with the file name with spaces, then we should escape the space
	or can include the file name in singlequotes
		
Files and Directory
	rwx represents read,write and execute
		r - only read the contents
		w - can write into that file
		x - execute that file as a program
	
				File									Directory
	
	r			read the file contents				Allows the file names in the directory to be read
	w			Allows file to be modified			Allows entries to be modified within the directory
	x			Allows the execution of the file	Allows access to contents and metadata for entries
	
Permission category
	u - User
	g - Group
	o - Other
	a - All
					
chmod
	used to change the permissions
	use the chmod followed by
		ugoa - groups 
		+/-  - add or remove
		rwx - read write and execute
		
		
		
chgrp
	change the group of the file which it belongs to
	by default the permission set on a directory is 777 and
	666 for files. 
			
umask
	is for taking away the permissions
	sets the file creation mask to mode if given
	use -S to for symbolic notation
	
	
find
	recursively finds files in the path that match the expressions. If no arguments are supplied
	it finds all the files in the current directory
	for example
		find <directory path> -name <pattern>
			finds the files and directories that match the pattern
		find <directory path> -iname <pattern>
			finds the files and directories that match the pattern with ignore case
		find <directory path> -name ls <pattern>		
			finds the files and directories that match the pattern also displays the ls on those files
			
		
locate
	similar to the find command
	faster that find
	find command looks for the file/directory at that particular time and gives the matched results.
	but where as locate command searches for the indexes for faster search
	indexes are built everytime.
		

head 
	displays the head of the file.
	usually 10 lines are displayed

tail
	displays the lower lines of the files
	-f is to follow the running files
	
	
vi editor commands
	vi editor command mode and navigation
		j - down one line
		k - up one line
		l - move cursor to right
		h - move cursor to left 		
		w - move right one word
		b - left one word
		$ - end to the line
		^ - beginning of the line
	vi editor insert mode
		i - insert at the cursor position
		I - insert at the beginning of the line
		a - append after the cursor position
		A - append at the end of the line
		
	vi line mode
		:w - save the file
		:w! - force save the file
		:q - quit the file writing
		:q! force quit without saving
		:wq! force save and quit
		:x same as :wq

Moving files
	use mv to move or rename the file or directory
	
sort
	sorts the contents of the file
	-r sorts in reverse order
	-k<word index> sorts on the word index.

tar 
	archiving the files using tar command
	syntax
		tar [-] c|x|f|t tarfile [pattern] 	

	c - creates the tar file
	x - Extract files from the archive
	t - Displays the table of contents
	v - be verbose, display the logs while extracting
	z - use compression
	f file - use this file
	

gzip
	compress files
	
gunzip
	uncompress files

gzcat
	concatenates compressed files
	
zcat
	concatenates compressed files
	
wildcards	
	wildcards are used to filter out the contents
	globbing is a technique for expanding the wildcard patterns into a list of files/directories
	wildcards can be used along with the commands 
		rm, cp, ls..etc
	
	There are two main wild cards
		*
			its very useful and pwerfl when it is combined with other chars like
				*.txt
				a*.txt
		?
			matches only one character
				?.txt	
	
Character classes
	[]
		matches any of the characters included between the brackets
		Matches exactly one char
		ca[nt]* matches
			cat, candy, can..etc
		
	[!]
		matches any of the characters NOT included between the brackets. Matches exactly one char
		[!aeiou]*		
			basketball
			cricket
	
Named Character classes
	[[:alpha]]
		matches all the alphabet chars
	
	[[:alnum]]
		matches the alpha numeric chars
		
	[[:digit]]
	
	[[:lower]]
			
	[[:space]]
	
Escaping
	\
		use to escape for any wildcards to include them in the search
		

IO types
	I/O name 			Abbreviation	File Descriptor
	Standard Input			stdin			0
	Standard Output			stdout			1
	Standard Error			stderr			2


File descriptors are the no of opened files
These are helpful for the computers.
Linux represents everything as a file
This helps to redirecting the from std in to std out and others

Redirections
	> redirects the standard output to a file
	  Overwrites (truncating) existing contents
	  
	>> redirects standard output to a file
	  Appends to the existing contents
	 
	< Redirects the input from a file to a command
		
	& Used with redirection to signal that a file descriptor is being used
	
	@>&1 combines stderr and standard output
	
	2>file redirect standard error to a file
	
	>/dev/null	redirects output to nowhere. It throws away whatever is fed to it
	
	if you mention, > <somefile>, then the standard output is sent to that file, this is equalent to 1>
	if we explicitly mention 2>, then the standard errors will go that mentioned file
	we can also redirect the error to the same file as output
		ls -l Sri* nothere 1>both.out 2>&1
			
	>/dev/null
		ignore everything it got
			for example, if we can to skip all the errors, then we can use them


Difference between two files
	We can compare two files and display the differences between them to the stdout
	
	diff file1 file2
		displays the difference between file1 and file2
		
	sdiff file1 file2
		side by side comparision
		
	vimdiff file1 file2
		Highlights differences in VIM
		
Searching the contents of the file
	grep [options] <pattern> filename
	Use grep command to check the contents of the file
		i - perform a search ignore case
		c - Count the no of occurences in the file
		n - precede output with line numbers
		v - invert match, print lines that don;t match
		 	
	file - use this command to know the type of that file
		file <fileNAME>		

	pipes
		| pipe symbol
		cat file|grep <pattern>
	
	strings command
		The binary files are not human readable, so for converting the binary to String, 
		we use this command. These strings are unicode and gibberish
		strings filename
		
	cut - cuts the selected portions of a file
		-d delimter
		-f file name
		
Copying the files over network
	scp - secure copy
		we can transfer the files from one server to the other by specifying the IP address
		and credentials of the other server
		
	sftp - ssh file transfer protocol
		We can copy the files in secure way
	ssh
		we can log into remote server with command line using this ssh
		

Customize the Shell Prompt
	PS1 
		we can customize the shell we are interacting by setting the value to the PS1 system variable
		
Shell Aliases
	If we are frequently using some commands, then we can set those commands to aliases
		These are used as 
			Shortcuts
			used for long commands
			used for commands that we type often
					
 	When we type 
 		alias
 			lists all the aliases of the current user
 			
 
 All teh above settings are for only that session. If you want to persist those settings, then
 	you should export them to the ~/.bash_profile file and can use them anywhere
 	
 
Environment Variables
	We can set these variables which effects how the program behaves
		printenv
			to list all the commands in the current system
		
		echo $<envName>
			displays that particular variable
				
 		export VAR="value"
 			VAR = name of the variable
 			value = value of the variable
 			
 		unset VAR
 			will unset the env variable
 						
Processes and Job Control
	ps - lists the running processes
		-e - Everything all processes
		-f - Full format listing
		-u <username> Display the processes for that user
		-p <pid> Displays process running with that PID
		
	we can also use
		pstree - display processes in a tree format
		top - interactive process viewer
		htop - interactive process viewer


Background and foreground processes
	<command> & 
		will make the process to run in the background and will not interrupt us to do other taks
		
	ctrl + c - kills the foreground process
	ctrl + z - suspend the foreground process
	
	kill <pid> kills the process with the PID
	fg - brings the background process to foreground 


cron jobs
	we can repeat the tasks on a schedule using this cron job
	use cron to schedule and automate the routine tasks
	
	cron - a time based scheduling service
	crontab - a table that we can use to create, delete, update the cron jobs
	 
	cron job can be scedules as 
		
		* * * * * command
		
		minute (0-59)
		  hour (0-23)
		  	day of the month (1-31)
		  	  month of the year	(1-12)
				day of the week (0-6)

	crontab file - install a new crontab from file
	crontab -l lists your cron jobs
	crontab -e edit your cron jobs
	crontab -r removes all your cron jobs
	
	
switching between the accounts
	
	su - switch to other user account
		if no args passed, then it logs with super user.
	
	executing without any options is same as executing su as root
		su = su root
	
	su options
		- 	
			A hypen is used to log with another user and will see how the another user sees at
		
		-c command
			Specify a command to be executed
			
	whoami
		returns the current account name
	
	sudo
		used to run commands as another user. It uses the security privilages of other users
		while executing the commands
		
		sudo is the admin's command.
		running this sudo, you can log into other accounts with no password required 
		it asks for your password again
		
		sudo su -
			logs into the root account
			options
			
				sudo -l
					list all available commands
				sudo command
					runs the command as root
				
				sudo -u root command 
					same as above
				
				sudo -u user command
					run as specified user
					
		sudo su 
			switch to the superuser account
		sudo su - 
			switch to super user account with roots environemnt
			
		sudo su - username
			switch to the username account with his environment
		
						
Shell history
	~/.bash_history
		all the commands are stored in this file.
	~/.history
		same as above
	~/.histfile
		same as ablve
		
	export HISTSIZE=1000
		max commands to remember						
					
	history
		using the command history will show all the last 1000 commands that were executed in the past				
		we can use !<commandnumber> to repeat the same command
	
		we can use !! to execute the same last command
		
		we can use !<string> repeat the same command that starts with that string.		
	
	ctrl+r = searches the history
	
	! here is also called as BANG

					
	!:N
		executes the N command in the commands
	
	!^
		executes the first command
	
	!$
		executes the last command
		
						
					
Package manager
	A package is a collection of files to make a software application
	The data/metadata in the package include
		package description
		version
		dependencies
	
	Package manager 
		uses to installs, upgrades and removes the packages
		Manages dependencies
		keeps track of what is installed 
		
		
	There are basically two types of package formats
		rpm
			yum is the package manager for the rpm packages
		deb
			apt-get is the advance package manager for the .deb packages
	
	
	
	rpm based distros
		redHat
		CentOs
		Fedora
		Oracle Linux
		Scientific Linux
							
	yum is the package manager for the rpm packages
		yum search string  
			searches for a package
		yum info [package]
			gives the info of package
		
		yum install [-y] package
			installs the package
			y switch will answer yes for all the prompts
		yum remove package
			removes the package
			
			
	in addition to yum, we can also use rpm command
		rpm -qa
			lists all the installed packages
		rpm -qf <pathtofile>
			lists the files package
		rpm -ql package
			lits package files
		
		rpm -ivh package.rpm
			installs the package
		
		rpm -e package
			erases (uninstall) the package
			
					

	Advance packaging tools
		apt-cache 
			is for the package info
			
			apt-cache search string
		
		apt-get install [-y] package
			installs the package	
		
		apt-get remove package
			removes the package
			but not the configs
			
		apt-get purge package
			removes the package and its config files
			
		apt-cache show package
			shows info abt package
			
	In addition to apt-get, we can also use the dpkg to interact with the package manager
		dpkg -l
			lists the installed packages
		
		dpkg -S <pathtoFile>
			lists files package
			
		dpkg -i package
			installs the package
			
		dpkg -L package
			lists all the files in package
			
Linux Boot Process
	BIOS
		Basic input output System
		This is the special firmware of the computers which runs the POST test
		This is software independent
		not unique to Linux
		Primary purpose is to find and execute the boot loader
	POST 
		Power On Self Test
		performs the hardware checks
	
	BIOS knows about the bootable devices like
		Hard Drives
		USB drives
		DVD drives..etc
		The device order can be changed
			
	BIOS loads the boot loader
	
	Boot loaders
		there are different kinds of boot loaders
			LILO
				Linux Loader
			GRUB
				Grand Unified Bootloader
				replaced the LILO
		Boot loader starts the Operating system
		Boot loader starts OS with different options
		
	initrd
		initial RAM Disk
		Its a temporary file system that is loaded from disk and stored in memory
		contains helpers and modules required to load the permanent OS files system
	
	/boot directory
		contains the files required to boot linux
		
	Kernel Ring Buffer
		contains messages from the linux kernel
		dmesg
		/var/log/dmesg
			contains the linux logs during the bootup
	
	Runlevels/Description
		
	Runlevels are controlled by init programs
		/etc/inittab
		
		Systemd
			uses targets instead of runlevels
			
	 
Learn again the Linux Boot Management
			
syslog standards
		 
Learn again the Linux logging
							
				
Disk management
	Disk is splitted into partitions
	each partition will not interfere into other partitions
	its better to have the home directories of all users in one partition so that we can avoid filling up the space
	partitions allow you to seperate the data
	can protect the overall system
			
	MBR
		Master Boot Record
			Is the boot sector at the beginning of the storage device
			contains the information on how the partitions are organized on disk
			can support only a disk space of 2TB
			Its been replaced by GPT - GUID partition table
			
	GPT
		GUID Partition Table - Global Unique Identifier Partition Table
		Replacing the MBR
		supports upto 9.4ZB
		supports 128 partitions
		works with only new OS
		is a part of UEFI
			UEFI - Unified Extensible Firmware Interface
			UEFI is replacing BIOS
		
								
Mount Points
	Mount Point is a directory used to access the data on a partition
	/ is always a mount point
	Every hDD will have atleast one single mount point i.e, /
	user directories canbe mounted 
	/home/speruri
		/home/speruri is the partition on the /home
		
 			
 	fdisk
 		partitioning tool
 		alternatives are gdisk, parted
 	
 	
File System
	 Linux mostly uses the file system called ext
	 ext = Extended File System
	 There are also ext2, ext3, ext4 file systems.
	 
	 
Learn again the Linux Disk Management
	 			
 			
user and Group Management
	 Linux is a multi-user OS
	 it has multiple user accounts and can be logged in at the same time
	 Each Account has a
	 	Username (or loginID)			
 		UID (user ID) this is unique
 		Default Group
 		Comments
 		Shell
 		Home directory location
 		
 	All the info is stored in etc/passwd file
 	
 	The entries are like
 		username:password:UID:GID:comments:home_dir:shell
 		
 		for eaxmple
 			speruri:x:1000:1000:Srikanth Peruri:/home/speruri:/bin/bash	
 			
	 		x here is password and it is in encrypted format and stored in /etc/shadow file
	 		
	 etc/shadow
	 	contains the enrypted passwords.
	 	
	UID for root is 0
			
	 			
 	shell
 		A shell will be executed when an user logs in
 		list of available shells are in /etc/shells
 		The shell doesn't have to be a shell
 			This gets executed even its not a shell upon login
 		
 	Adding the user
 		adduser [options] username		
 		We can also create the acounts for the applications or system processes
 			
 	removing the user
 		userdel [-r] username
 			use -r to remove the user home directory as well
 				
 			
 	update the user
 		usermod [options] username
 				
 			
Managing Groups
	 group details are stored in /etc/group file
	 
	 groupadd groupName
	 	adds group
	 
	 groupdel groupName
	 	deletes group
	 	
	 groupmod groupName
	 	modifies group
	 	
	 
Networking in Linux
	
	TCP/IP
		standard for the network
		TCP 
			is responsible for establishing the connection between two devices
			maintains the communication
		IP
	 		transfers the data from one to other
	 		
	 	Hosts
	 		devices on the network and have IP address
	 		
	Each device on the network should have these
		IP
		Subnet 
		Broadcast address
		All these are 4 sets of octets i.e, 8 bits each
		and will be between 0 - 255
		 
ip address
	ip addr
	ip a
	ip address show ip a s	 			
 			
 			
setuid
	 When a process is started, it runs using the starting UeerId and GroupId
	 setuid = set User ID upon execution
	 ping
	 		 
 
Script 
	is a series of command line programs
	
 
 
 
 
 
 
 
 
 
 